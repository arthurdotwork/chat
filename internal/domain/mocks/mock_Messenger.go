// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arthurdotwork/chat/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockMessenger is an autogenerated mock type for the Messenger type
type MockMessenger struct {
	mock.Mock
}

type MockMessenger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessenger) EXPECT() *MockMessenger_Expecter {
	return &MockMessenger_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, message
func (_m *MockMessenger) SendMessage(ctx context.Context, message domain.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessenger_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockMessenger_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message domain.Message
func (_e *MockMessenger_Expecter) SendMessage(ctx interface{}, message interface{}) *MockMessenger_SendMessage_Call {
	return &MockMessenger_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, message)}
}

func (_c *MockMessenger_SendMessage_Call) Run(run func(ctx context.Context, message domain.Message)) *MockMessenger_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Message))
	})
	return _c
}

func (_c *MockMessenger_SendMessage_Call) Return(_a0 error) *MockMessenger_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessenger_SendMessage_Call) RunAndReturn(run func(context.Context, domain.Message) error) *MockMessenger_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendServerClosingNotification provides a mock function with given fields: ctx
func (_m *MockMessenger) SendServerClosingNotification(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SendServerClosingNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessenger_SendServerClosingNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendServerClosingNotification'
type MockMessenger_SendServerClosingNotification_Call struct {
	*mock.Call
}

// SendServerClosingNotification is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessenger_Expecter) SendServerClosingNotification(ctx interface{}) *MockMessenger_SendServerClosingNotification_Call {
	return &MockMessenger_SendServerClosingNotification_Call{Call: _e.mock.On("SendServerClosingNotification", ctx)}
}

func (_c *MockMessenger_SendServerClosingNotification_Call) Run(run func(ctx context.Context)) *MockMessenger_SendServerClosingNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessenger_SendServerClosingNotification_Call) Return(_a0 error) *MockMessenger_SendServerClosingNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessenger_SendServerClosingNotification_Call) RunAndReturn(run func(context.Context) error) *MockMessenger_SendServerClosingNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessenger creates a new instance of MockMessenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessenger {
	mock := &MockMessenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
