// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arthurdotwork/chat/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRoomStore is an autogenerated mock type for the RoomStore type
type MockRoomStore struct {
	mock.Mock
}

type MockRoomStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoomStore) EXPECT() *MockRoomStore_Expecter {
	return &MockRoomStore_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx, user
func (_m *MockRoomStore) Connect(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoomStore_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockRoomStore_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *MockRoomStore_Expecter) Connect(ctx interface{}, user interface{}) *MockRoomStore_Connect_Call {
	return &MockRoomStore_Connect_Call{Call: _e.mock.On("Connect", ctx, user)}
}

func (_c *MockRoomStore_Connect_Call) Run(run func(ctx context.Context, user domain.User)) *MockRoomStore_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *MockRoomStore_Connect_Call) Return(_a0 error) *MockRoomStore_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoomStore_Connect_Call) RunAndReturn(run func(context.Context, domain.User) error) *MockRoomStore_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx, user
func (_m *MockRoomStore) Disconnect(ctx context.Context, user domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRoomStore_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockRoomStore_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
//   - user domain.User
func (_e *MockRoomStore_Expecter) Disconnect(ctx interface{}, user interface{}) *MockRoomStore_Disconnect_Call {
	return &MockRoomStore_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx, user)}
}

func (_c *MockRoomStore_Disconnect_Call) Run(run func(ctx context.Context, user domain.User)) *MockRoomStore_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *MockRoomStore_Disconnect_Call) Return(_a0 error) *MockRoomStore_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRoomStore_Disconnect_Call) RunAndReturn(run func(context.Context, domain.User) error) *MockRoomStore_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectedUsers provides a mock function with given fields: ctx
func (_m *MockRoomStore) GetConnectedUsers(ctx context.Context) ([]domain.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectedUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoomStore_GetConnectedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectedUsers'
type MockRoomStore_GetConnectedUsers_Call struct {
	*mock.Call
}

// GetConnectedUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRoomStore_Expecter) GetConnectedUsers(ctx interface{}) *MockRoomStore_GetConnectedUsers_Call {
	return &MockRoomStore_GetConnectedUsers_Call{Call: _e.mock.On("GetConnectedUsers", ctx)}
}

func (_c *MockRoomStore_GetConnectedUsers_Call) Run(run func(ctx context.Context)) *MockRoomStore_GetConnectedUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRoomStore_GetConnectedUsers_Call) Return(_a0 []domain.User, _a1 error) *MockRoomStore_GetConnectedUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoomStore_GetConnectedUsers_Call) RunAndReturn(run func(context.Context) ([]domain.User, error)) *MockRoomStore_GetConnectedUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *MockRoomStore) GetUser(ctx context.Context, userID uuid.UUID) (domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRoomStore_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockRoomStore_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockRoomStore_Expecter) GetUser(ctx interface{}, userID interface{}) *MockRoomStore_GetUser_Call {
	return &MockRoomStore_GetUser_Call{Call: _e.mock.On("GetUser", ctx, userID)}
}

func (_c *MockRoomStore_GetUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockRoomStore_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRoomStore_GetUser_Call) Return(_a0 domain.User, _a1 error) *MockRoomStore_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoomStore_GetUser_Call) RunAndReturn(run func(context.Context, uuid.UUID) (domain.User, error)) *MockRoomStore_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoomStore creates a new instance of MockRoomStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoomStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoomStore {
	mock := &MockRoomStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
